//go:generate goat main.go
package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log/slog"
	"os"
)

// Options defines the command line options.
type Options struct {
	Version    bool   // Print version information
	Help       bool   // Show help message
	ConfigFile string // Path to the configuration file
}

// run is the actual command logic.
func run(opts Options) error { // Parameter type changed to Options, name to opts
	return json.NewEncoder(os.Stdout).Encode(opts)
}

// This main function was auto-generated by goat.
func main() {
	ctx := context.Background()
	isFlagExplicitlySet := make(map[string]bool)
	var err error
	_ = err

	flag.Usage = func() {
		fmt.Fprint(os.Stderr, `hello - run is the actual command logic.

Usage:
  hello [flags]

Flags:
  --version     bool     Print version information
  --help        bool     Show help message
  --config-file string   Path to the configuration file (required)

  -h, --help            Show this help message and exit
`)
	}

	// --- 1. Initialize Options Struct ---
	options := new(Options)
	// Apply default values from struct tags/types

	// --- 2. Process Environment Variables ---

	// --- 3. Register Flags ---
	flag.BoolVar(&options.Version, "version", false, "Print version information (default: false)")
	flag.BoolVar(&options.Help, "help", false, "Show help message (default: false)")
	flag.StringVar(&options.ConfigFile, "config-file", "", "Path to the configuration file")

	// --- 4. Parse Flags ---
	flag.Parse()
	flag.Visit(func(f *flag.Flag) { isFlagExplicitlySet[f.Name] = true })

	// --- 5. Post-Parse Flag Assignments (for pointers, etc.) ---

	// --- 6. Perform Required Option Checks ---
	initialDefault_Version := false
	env_Version_WasSet := false
	initialDefault_Help := false
	env_Help_WasSet := false
	initialDefault_Configfile := ""
	env_Configfile_WasSet := false
	if err = func() error {
		if options.Version == initialDefault_Version && !isFlagExplicitlySet["version"] && !env_Version_WasSet {
			slog.ErrorContext(ctx, "Missing required boolean option (must be explicitly set)", "flag", "version", "option", "Version")
			return fmt.Errorf("missing or not explicitly set required option: --version / ")
		}
		return nil
	}(); err != nil {
		slog.ErrorContext(ctx, "Error processing required option", "option", "version", "error", err)
		os.Exit(1)
	}
	if err = func() error {
		if options.Help == initialDefault_Help && !isFlagExplicitlySet["help"] && !env_Help_WasSet {
			slog.ErrorContext(ctx, "Missing required boolean option (must be explicitly set)", "flag", "help", "option", "Help")
			return fmt.Errorf("missing or not explicitly set required option: --help / ")
		}
		return nil
	}(); err != nil {
		slog.ErrorContext(ctx, "Error processing required option", "option", "help", "error", err)
		os.Exit(1)
	}
	if err = func() error {
		if options.ConfigFile == initialDefault_Configfile && !isFlagExplicitlySet["config-file"] && !env_Configfile_WasSet {
			slog.ErrorContext(ctx, "Missing required option", "flag", "config-file", "option", "ConfigFile")
			return fmt.Errorf("missing required option: --config-file / ")
		}
		return nil
	}(); err != nil {
		slog.ErrorContext(ctx, "Error processing required option", "option", "config-file", "error", err)
		os.Exit(1)
	}

	// --- 7. Perform Enum Validations ---

	// --- 8. Execute Run Function ---
	err = run(*options)
	if err != nil {
		slog.ErrorContext(ctx, "Runtime error from command function", "error", err)
		os.Exit(1)
	}
}
